#pragma version 10

smart_contracts.poa.contract.ProofOfAttendance.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/poa/contract.py:4
    // class ProofOfAttendance(algopy.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@9
    method "confirm_attendance()void"
    method "get_poa_id()uint64"
    method "claim_poa(axfer)void"
    txna ApplicationArgs 0
    match main_confirm_attendance_route@4 main_get_poa_id_route@5 main_claim_poa_route@6
    err // reject transaction

main_confirm_attendance_route@4:
    // smart_contracts/poa/contract.py:12
    // @algopy.arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub confirm_attendance
    int 1
    return

main_get_poa_id_route@5:
    // smart_contracts/poa/contract.py:24
    // @algopy.arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_poa_id
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_claim_poa_route@6:
    // smart_contracts/poa/contract.py:30
    // @algopy.arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/poa/contract.py:4
    // class ProofOfAttendance(algopy.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/poa/contract.py:30
    // @algopy.arc4.abimethod()
    callsub claim_poa
    int 1
    return

main_bare_routing@9:
    // smart_contracts/poa/contract.py:4
    // class ProofOfAttendance(algopy.ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.poa.contract.ProofOfAttendance.confirm_attendance() -> void:
confirm_attendance:
    // smart_contracts/poa/contract.py:12-13
    // @algopy.arc4.abimethod()
    // def confirm_attendance(self) -> None:
    proto 0 0
    // smart_contracts/poa/contract.py:14
    // assert self.total_attendees < self.max_attendees, "Max attendees reached"
    int 0
    // smart_contracts/poa/contract.py:10
    // self.total_attendees = algopy.UInt64(0)
    byte "total_attendees"
    // smart_contracts/poa/contract.py:14
    // assert self.total_attendees < self.max_attendees, "Max attendees reached"
    app_global_get_ex
    assert // check self.total_attendees exists
    int 0
    // smart_contracts/poa/contract.py:6
    // self.max_attendees = algopy.UInt64(50)
    byte "max_attendees"
    // smart_contracts/poa/contract.py:14
    // assert self.total_attendees < self.max_attendees, "Max attendees reached"
    app_global_get_ex
    assert // check self.max_attendees exists
    <
    assert // Max attendees reached
    // smart_contracts/poa/contract.py:16
    // minted_asset = self._mint_poa(algopy.Txn.sender)
    txn Sender
    callsub _mint_poa
    // smart_contracts/poa/contract.py:17
    // self.total_attendees += 1
    int 0
    // smart_contracts/poa/contract.py:10
    // self.total_attendees = algopy.UInt64(0)
    byte "total_attendees"
    // smart_contracts/poa/contract.py:17
    // self.total_attendees += 1
    app_global_get_ex
    assert // check self.total_attendees exists
    int 1
    +
    // smart_contracts/poa/contract.py:10
    // self.total_attendees = algopy.UInt64(0)
    byte "total_attendees"
    // smart_contracts/poa/contract.py:17
    // self.total_attendees += 1
    swap
    app_global_put
    // smart_contracts/poa/contract.py:19
    // _id, has_claimed = algopy.op.Box.get(algopy.Txn.sender.bytes)
    txn Sender
    box_get
    bury 1
    // smart_contracts/poa/contract.py:20
    // assert not has_claimed, "Already claimed POA"
    !
    assert // Already claimed POA
    // smart_contracts/poa/contract.py:22
    // algopy.op.Box.put(algopy.Txn.sender.bytes, algopy.op.itob(minted_asset.id))
    txn Sender
    swap
    itob
    box_put
    retsub


// smart_contracts.poa.contract.ProofOfAttendance._mint_poa(claimer: bytes) -> uint64:
_mint_poa:
    // smart_contracts/poa/contract.py:51-52
    // @algopy.subroutine
    // def _mint_poa(self, claimer: algopy.Account) -> algopy.Asset:
    proto 1 1
    // smart_contracts/poa/contract.py:53
    // asset_name = b"AlgoKit POA #" + algopy.op.itob(self.total_attendees)
    int 0
    // smart_contracts/poa/contract.py:10
    // self.total_attendees = algopy.UInt64(0)
    byte "total_attendees"
    // smart_contracts/poa/contract.py:53
    // asset_name = b"AlgoKit POA #" + algopy.op.itob(self.total_attendees)
    app_global_get_ex
    assert // check self.total_attendees exists
    itob
    byte 0x416c676f4b697420504f412023
    swap
    concat
    // smart_contracts/poa/contract.py:55-63
    // algopy.itxn.AssetConfig(
    //     asset_name=asset_name,
    //     unit_name=algopy.String("POA"),
    //     total=algopy.UInt64(1),
    //     decimals=0,
    //     url=self.asset_url,
    //     manager=claimer,
    // )
    // .submit()
    itxn_begin
    // smart_contracts/poa/contract.py:60
    // url=self.asset_url,
    int 0
    // smart_contracts/poa/contract.py:7
    // self.asset_url = algopy.String(
    byte "asset_url"
    // smart_contracts/poa/contract.py:60
    // url=self.asset_url,
    app_global_get_ex
    assert // check self.asset_url exists
    frame_dig -1
    itxn_field ConfigAssetManager
    itxn_field ConfigAssetURL
    // smart_contracts/poa/contract.py:59
    // decimals=0,
    int 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/poa/contract.py:58
    // total=algopy.UInt64(1),
    int 1
    itxn_field ConfigAssetTotal
    // smart_contracts/poa/contract.py:57
    // unit_name=algopy.String("POA"),
    byte "POA"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // smart_contracts/poa/contract.py:55
    // algopy.itxn.AssetConfig(
    int acfg
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/poa/contract.py:55-63
    // algopy.itxn.AssetConfig(
    //     asset_name=asset_name,
    //     unit_name=algopy.String("POA"),
    //     total=algopy.UInt64(1),
    //     decimals=0,
    //     url=self.asset_url,
    //     manager=claimer,
    // )
    // .submit()
    itxn_submit
    // smart_contracts/poa/contract.py:55-64
    // algopy.itxn.AssetConfig(
    //     asset_name=asset_name,
    //     unit_name=algopy.String("POA"),
    //     total=algopy.UInt64(1),
    //     decimals=0,
    //     url=self.asset_url,
    //     manager=claimer,
    // )
    // .submit()
    // .created_asset
    itxn CreatedAssetID
    // smart_contracts/poa/contract.py:54-65
    // return (
    //     algopy.itxn.AssetConfig(
    //         asset_name=asset_name,
    //         unit_name=algopy.String("POA"),
    //         total=algopy.UInt64(1),
    //         decimals=0,
    //         url=self.asset_url,
    //         manager=claimer,
    //     )
    //     .submit()
    //     .created_asset
    // )
    retsub


// smart_contracts.poa.contract.ProofOfAttendance.get_poa_id() -> uint64:
get_poa_id:
    // smart_contracts/poa/contract.py:24-25
    // @algopy.arc4.abimethod(readonly=True)
    // def get_poa_id(self) -> algopy.UInt64:
    proto 0 1
    // smart_contracts/poa/contract.py:26
    // poa_id, exists = algopy.op.Box.get(algopy.Txn.sender.bytes)
    txn Sender
    box_get
    // smart_contracts/poa/contract.py:27
    // assert exists, "POA not found"
    assert // POA not found
    // smart_contracts/poa/contract.py:28
    // return algopy.op.btoi(poa_id)
    btoi
    retsub


// smart_contracts.poa.contract.ProofOfAttendance.claim_poa(opt_in_txn: uint64) -> void:
claim_poa:
    // smart_contracts/poa/contract.py:30-31
    // @algopy.arc4.abimethod()
    // def claim_poa(self, opt_in_txn: algopy.gtxn.AssetTransferTransaction) -> None:
    proto 1 0
    int 0
    // smart_contracts/poa/contract.py:32
    // poa_id, exists = algopy.op.Box.get(algopy.Txn.sender.bytes)
    txn Sender
    box_get
    // smart_contracts/poa/contract.py:33
    // assert exists, "POA not found, attendance validation failed!"
    assert // POA not found, attendance validation failed!
    // smart_contracts/poa/contract.py:34
    // assert opt_in_txn.xfer_asset.id == algopy.op.btoi(poa_id), "POA ID mismatch"
    frame_dig -1
    gtxns XferAsset
    swap
    btoi
    dup
    cover 2
    ==
    assert // POA ID mismatch
    // smart_contracts/poa/contract.py:35
    // assert opt_in_txn.fee == algopy.UInt64(0), "We got you covered for free!"
    frame_dig -1
    gtxns Fee
    !
    assert // We got you covered for free!
    // smart_contracts/poa/contract.py:36
    // assert opt_in_txn.asset_amount == algopy.UInt64(0)
    frame_dig -1
    gtxns AssetAmount
    !
    assert
    // smart_contracts/poa/contract.py:38
    // opt_in_txn.sender == opt_in_txn.asset_receiver == algopy.Txn.sender
    frame_dig -1
    gtxns Sender
    frame_dig -1
    gtxns AssetReceiver
    dup
    cover 2
    ==
    bz claim_poa_bool_false@3
    frame_dig 2
    txn Sender
    ==
    bz claim_poa_bool_false@3
    int 1
    b claim_poa_bool_merge@4

claim_poa_bool_false@3:
    int 0

claim_poa_bool_merge@4:
    // smart_contracts/poa/contract.py:37-39
    // assert (
    //     opt_in_txn.sender == opt_in_txn.asset_receiver == algopy.Txn.sender
    // ), "Opt-in transaction sender and receiver must be the same"
    assert // Opt-in transaction sender and receiver must be the same
    // smart_contracts/poa/contract.py:41
    // opt_in_txn.asset_close_to
    frame_dig -1
    gtxns AssetCloseTo
    // smart_contracts/poa/contract.py:42
    // == opt_in_txn.rekey_to
    frame_dig -1
    gtxns RekeyTo
    dup
    frame_bury 0
    // smart_contracts/poa/contract.py:41-42
    // opt_in_txn.asset_close_to
    // == opt_in_txn.rekey_to
    ==
    // smart_contracts/poa/contract.py:41-43
    // opt_in_txn.asset_close_to
    // == opt_in_txn.rekey_to
    // == algopy.Global.zero_address
    bz claim_poa_bool_false@7
    // smart_contracts/poa/contract.py:42-43
    // == opt_in_txn.rekey_to
    // == algopy.Global.zero_address
    frame_dig 0
    // smart_contracts/poa/contract.py:43
    // == algopy.Global.zero_address
    global ZeroAddress
    // smart_contracts/poa/contract.py:42-43
    // == opt_in_txn.rekey_to
    // == algopy.Global.zero_address
    ==
    // smart_contracts/poa/contract.py:41-43
    // opt_in_txn.asset_close_to
    // == opt_in_txn.rekey_to
    // == algopy.Global.zero_address
    bz claim_poa_bool_false@7
    int 1
    b claim_poa_bool_merge@8

claim_poa_bool_false@7:
    int 0

claim_poa_bool_merge@8:
    // smart_contracts/poa/contract.py:40-44
    // assert (
    //     opt_in_txn.asset_close_to
    //     == opt_in_txn.rekey_to
    //     == algopy.Global.zero_address
    // ), "Opt-in transaction close to must be zero address"
    assert // Opt-in transaction close to must be zero address
    // smart_contracts/poa/contract.py:47
    // algopy.Txn.sender,
    txn Sender
    // smart_contracts/poa/contract.py:46-49
    // self._send_poa(
    //     algopy.Txn.sender,
    //     algopy.op.btoi(poa_id),
    // )
    frame_dig 1
    callsub _send_poa
    retsub


// smart_contracts.poa.contract.ProofOfAttendance._send_poa(receiver: bytes, asset_id: uint64) -> void:
_send_poa:
    // smart_contracts/poa/contract.py:67-68
    // @algopy.subroutine
    // def _send_poa(self, receiver: algopy.Account, asset_id: algopy.UInt64) -> None:
    proto 2 0
    // smart_contracts/poa/contract.py:69-74
    // algopy.itxn.AssetTransfer(
    //     xfer_asset=asset_id,
    //     sender=algopy.Global.current_application_address,
    //     asset_receiver=receiver,
    //     asset_amount=1,
    // ).submit()
    itxn_begin
    // smart_contracts/poa/contract.py:71
    // sender=algopy.Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/poa/contract.py:73
    // asset_amount=1,
    int 1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetReceiver
    itxn_field Sender
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/poa/contract.py:69
    // algopy.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/poa/contract.py:69-74
    // algopy.itxn.AssetTransfer(
    //     xfer_asset=asset_id,
    //     sender=algopy.Global.current_application_address,
    //     asset_receiver=receiver,
    //     asset_amount=1,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.poa.contract.ProofOfAttendance.__init__() -> void:
__init__:
    // smart_contracts/poa/contract.py:5
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/poa/contract.py:6
    // self.max_attendees = algopy.UInt64(50)
    byte "max_attendees"
    int 50
    app_global_put
    // smart_contracts/poa/contract.py:7
    // self.asset_url = algopy.String(
    byte "asset_url"
    // smart_contracts/poa/contract.py:7-9
    // self.asset_url = algopy.String(
    //     "ipfs://bafybeidjc3a44nrmswtinkhsfkk7fiudkpfkqrhn5rsnunp6zxhsgdecke"
    // )
    byte "ipfs://bafybeidjc3a44nrmswtinkhsfkk7fiudkpfkqrhn5rsnunp6zxhsgdecke"
    app_global_put
    // smart_contracts/poa/contract.py:10
    // self.total_attendees = algopy.UInt64(0)
    byte "total_attendees"
    int 0
    app_global_put
    retsub
